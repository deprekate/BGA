########################################################################
#
# This module defines extensions to the automagically created file
# tool.pm. Add your own code below.
#
# $Id: tool_add.pm,v 1.1.1.1 2005/02/22 18:05:36 givans Exp $
#
# $Log: tool_add.pm,v $
# Revision 1.1.1.1  2005/02/22 18:05:36  givans
#
#
# Revision 1.7  2002/03/26 14:32:06  blinke
# added delete_complete to remove associated objects
#
# Revision 1.6  2001/12/14 14:07:53  blinke
# added genome_helper
#
# Revision 1.5  2001/12/12 17:15:06  blinke
# corrected and simplfied highest_tool_number
#
# Revision 1.4  2001/12/12 16:52:43  blinke
# added highest_tool_number (little sub to fetch the current highest tool number)
#
# Revision 1.3  2001/10/12 13:06:29  agoesman
# checked for GENDB release Version 1.0.5
#
# Revision 1.2  2001/07/05 14:58:55  blinke
# added signalp_helper
#
# Revision 1.1  2001/05/18 12:40:45  oliver
# Initial revision
#
# Revision 1.2  2000/05/26 14:20:45  blinke
# *** empty log message ***
#
#
#
########################################################################


$VERSION = 1.2;

1;

# we have to add _ALL_ helper packages!!!
use GENDB::Tools::blast_helper;
use GENDB::Tools::blast_helper_no_filter;
use GENDB::Tools::pfam_helper;
use GENDB::Tools::pfscan_helper;
use GENDB::Tools::signalp_helper;
use GENDB::Tools::genome_helper;
use GENDB::Tools::genome_helper_no_filter;
use GENDB::Tools::interpro_helper;
use GENDB::Tools::tmhmm_helper;
use GENDB::Tools::CoBias_helper;

########################
# simple sort function #
########################
sub sort_by_number {
    $a->number <=> $b->number;
};


######################################################
# get all tool objects from the database efficiently #
# and return an ordered array reference              #
######################################################
sub fetch_ordered_tools {
    my ($class) = @_;

    # for each orf from the Database
    $tools=GENDB::tool->fetchall;
    @tools_sorted=sort sort_by_number @$tools;

    return \@tools_sorted;
};


###########################
# create the command line #
###########################
sub command_line {
    my ($class, @parameters) = @_;

    my $result = &{$class->helper_package()."::command_line"} ($class, @parameters);
    
    return $result;
};


#############
# run a job #
#############
sub run_job {
    my ($class, $what) = @_;

    my $result = &{$class->helper_package()."::run_job"} ($class, $what);
    
    return $result;
};


#########################
# return score for fact #
#########################
sub score {    
    my ($class, $fact) = @_;

    my $result = &{$class->helper_package()."::score"} ($fact);
    
    return $result;
};


##############################
# return score bits for fact #
##############################
sub bits {
    my ($class, $fact) = @_;

    my $result = &{$class->helper_package()."::bits"} ($fact);
    
    return $result;
};


##############################
# return the level of a fact #
##############################
sub level {
    my ($class, $fact) = @_;

    my $result = &{$class->helper_package()."::level"} ($class, $fact);
    
    return $result;
};


####################
# configure a tool #
####################
sub configure {  
    my ($class) = @_;

    my @result = &{$class->helper_package()."::configure"};
    
    return @result;
};


#################################
# fetch the highest tool number #
#################################
sub highest_tool_number {
    my ($class) = @_;
    my $sth = $GENDB_DBH->prepare(qq {
	SELECT max(number) FROM tool});
    $sth->execute;    
    my ($number) = $sth->fetchrow_array;
    return $number;
}

######################
# delete_complete
#
# delete this tool and all associated objects like
# facts and orfstate
#
######################
sub delete_complete {
    my ($self) = @_;

    # delete fact generated by this tool
  GENDB::fact->delete_by_tool($self);

    # delete all orfstate associated with this tool
  GENDB::orfstate->delete_by_tool($self);
    
    # and now...delete myself
    $self->delete;
}

######################
#
# propagate alignment_state query to helper package
#
######################
sub alignment_state {
    my ($self) = @_;
    my $result;
    eval {$result = &{$self->helper_package()."::alignment_state"};};
    if ($@) {
	# default: all tools can produce alignments..
	$result=1;
    }
    return $result;
}


