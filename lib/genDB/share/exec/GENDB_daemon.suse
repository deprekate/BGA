#! /bin/sh
#
# System startup script for the GENDB daemon
#
# (modified from inetd startup script of SuSE 8.0)
### BEGIN INIT INFO
# Provides: GENDB_daemon
# Required-Start: mysql
# Required-Stop:
# Default-Start: 3 5
# Default-Stop: 0 1 2 6
# Description: Start the GENDB daemon.
### END INIT INFO

GENDB_DAEMON=/usr/local/share/genDB/bin/GENDB_daemon.pl
test -x $GENDB_DAEMON || exit 5

DAEMON_USER="change this !"

test "$DAEMON_USER" = "change this !" && exit 5

test "$DAEMOM_USER" = "root" && exit 5

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     ditto but be verbose in local rc status
#      rc_status -v -r  ditto and clear the local rc status
#      rc_failed        set local and overall rc status to failed
#      rc_reset         clear local rc status (overall remains)
#      rc_exit          exit appropriate to overall rc status
. /etc/rc.status

# First reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0 - success
# 1 - misc error
# 2 - invalid or excess args
# 3 - unimplemented feature (e.g. reload)
# 4 - insufficient privilege
# 5 - program not installed
# 6 - program not configured
#
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signalling is not supported) are
# considered a success.

case "$1" in
    start)
	echo -n "Starting GENDB daemon"
	## Start daemon with startproc(8). If this fails
	## the echo return value is set appropriate.

	# startproc should return 0, even if service is
	# already running to match LSB spec.
	startproc -u $DAEMON_USER $GENDB_DAEMON

	# Remember status and be verbose
	rc_status -v
	;;
    stop)
	echo -n "Shutting down GENDB daemon"
	## Stop daemon with killproc(8) and if this fails
	## set echo the echo return value.

	killproc -TERM $GENDB_DAEMON

	# Remember status and be verbose
	rc_status -v
	;;
    try-restart)
	## Stop the service and if this succeeds (i.e. the
	## service was running before), start it again.
	$0 stop  &&  $0 start

	# Remember status and be quiet
	rc_status
	;;
    restart)
	## Stop the service and regardless of whether it was
	## running or not, start it again.
	$0 stop
	$0 start

	# Remember status and be quiet
	rc_status
	;;
    force-reload)
	## Signal the daemon to reload its config. Most daemons
	## do this on signal 1 (SIGHUP).
	## If it does not support it, restart.

        echo -n "Reload service GENDB daemon"
        $0 stop
        $1 start
	rc_status -v
	;;
    reload)
	## Like force-reload, but if daemon does not support
	## signalling, do nothing (!)

	# If it supports signalling:
	rc_status -v
	;;
    status)
	echo -n "Checking for GENDB daemon: "

	# Status has a slightly different for the status command:
	# 0 - service running
	# 1 - service dead, but /var/run/  pid  file exists
	# 2 - service dead, but /var/lock/ lock file exists
	# 3 - service not running

	checkproc $GENDB_DAEMON
	rc_status -v
	;;
    *)
	echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload}"
	exit 1
	;;
esac
rc_exit
