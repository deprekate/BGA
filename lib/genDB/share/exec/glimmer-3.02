#!/usr/bin/env perl
# wrapper for Glimmer am/23/08/01
# $Id: glimmer-2.02,v 1.3 2007/01/05 23:15:55 genDB Exp $
use strict;
use Getopt::Std;
use POSIX;

# config section

# path to glimmer3.02 binaries
my $RPATH='/usr/dev/bin';

# end of config

# set PATH to glimmer3.02 tools
$ENV{PATH}="$RPATH:".$ENV{PATH};

sub usage{
    print "Usage: $0\n\t",
    "[-f fasta-file]   fasta_file  = compute ORFs for this sequence\n\t",
    "[-c contig_file]  contig_file = use this contig to train the model\n\t",
    "[-m model_file]   model_file  = use this model created in a previous run\n\t",
    "[-a orf_file]     orf_file    = use these orfs to train the model\n\t",
    "[-o outfile]      out_file    = use this file to save glimmer2 output\n\t",
    "[-x]                            more detailed glimmer2 output\n\t",
    "[-s seq]          seq         = use this sequence as ribosome binding pattern to find start codons\n\t",    
    "[-S RBS_file]     RBS_file    = sequence as ribosome binding pattern in RBS_file\n\t",
    "[-r]                            use ribosome binding pattern to choose start codon\n\t",
    "                                (default is \"tcctcca\" - RBS pattern of H.pylori)\n\t",
    "[-t number]       number      = use this genetic code\n\t",
    "[-l]                            sequence is not circular\n\t",
    "[-p]                            preserve model file for later use\n\t",
    "[-v]                            verbose\n";
    die "\n";
}


if ($#ARGV < 0) {
    usage;
}

my $adress = "givans\@cgrb.oregonstate.edu";

# parse the arguments
getopts('pvlrxf:a:t:s:S:m:c:o:');
my $verbose = $main::opt_v; 
my $preserve_model = $main::opt_p; 
my $file = $main::opt_f;
my $model_file = $main::opt_m;
my $contig_file = $main::opt_c;
#my $out_file = $main::opt_o ? ">$main::opt_o" :"";
my $out_file = $main::opt_o ? "$main::opt_o" :"";
my $detailed_info = $main::opt_x ? "" : "|get-putative 2>/dev/null";
my $choose_start = $main::opt_r;
my $circular = $main::opt_l;
my $orf_file = $main::opt_a; 

my $gen_code = $main::opt_t ? "_gen".$main::opt_t : undef;
if ($gen_code) {
    die "Code $main::opt_t can't be used!\n(contact $adress)\n" unless  -x "$RPATH/long-orfs$gen_code";
    die "Code $main::opt_t can't be used!\n(contact $adress)\n" unless  -x "$RPATH/glimmer2$gen_code" ;
}

my $rbs_seq = $main::opt_s;
if ($main::opt_S) {
    usage if $rbs_seq;
    open (IN, "$main::opt_S") || usage;
    while (<IN>) {
	chomp;
	/(\S+)/;
	$rbs_seq.= $_;
    }
    close(IN) || die; 
}
if ($rbs_seq && ! $choose_start) {
    print STDERR " To use $rbs_seq as ribosome binding pattern for start codon choice use [-r]\n";
    usage;
}

open(IN,"$file") || usage;

if ($out_file) {
    print STDERR "Using $out_file to save results.\n" if ($verbose);
} else {
	$out_file = $file . ".out";
}

if (! $contig_file) {
  $contig_file=$file;
}

# set file names 
my $tmp_coord_file=tmpnam();
my $tmp_train_file=tmpnam();
my $use_model;
if (! $model_file) {
    $model_file=tmpnam();
}
else {
    $use_model=1;
    print STDERR "Using model file $model_file\n" if $verbose;
}

# if we have a model file skip to last step
# if not create a model from contig sequence or a list of orfs
my $cmd;
if (! $use_model) {
    if (!$orf_file) {
	print STDERR "Find non-overlapping orfs in $contig_file\n" if $verbose;
	$cmd ="long-orfs".($gen_code ? "$gen_code": "").
	    " $contig_file 2>/dev/null| get-putative 2>/dev/null >$tmp_coord_file";
	system($cmd);
    }
    else {$tmp_coord_file = $orf_file}
	
    print STDERR "Extract training sequences from $contig_file to $tmp_train_file\n" if $verbose;
    $cmd="extract $contig_file $tmp_coord_file >$tmp_train_file 2>/dev/null";
    system($cmd);
    
    print STDERR "Build interpolated context model in $model_file\n" if $verbose;
    $cmd="build-icm <$tmp_train_file >$model_file 2>/dev/null";
    system($cmd);
    
}

else {
    print STDERR "Using previously built model file $model_file\n" if $verbose;
}

# Building command from options
#$cmd = "glimmer2" . ($gen_code ? "$gen_code": "") . " $file $model_file " . "-X -o 30 " .  ($choose_start ? " -f":"") . ($rbs_seq ? " -s $rbs_seq" :"") . ($circular ? " -l": "") . " 2>/dev/null" . $detailed_info.$out_file;
$cmd = "glimmer3" . ($circular ? " -l": "") . " $file $model_file $out_file " . " 2> /dev/null";
print STDERR $cmd."\n" if ($verbose);
system($cmd);
#system("awk '{ if (!/>/) { sub(\/orf0+\/,\"\",\$1); print \$1 \"\\t\" $2 \"\\t\" $3-3 \"\\t[\" $4 \" L=\" sqrt((($3-3) - $2)**2) + 1 \" r=-1.276]\"; } }' $out_file.predict");
open(PREDICT,"$out_file.predict") or die "can't open $out_file.predict: $!";
foreach my $line (<PREDICT>) {
	next if ($line =~ /^>/);
	if ($line =~ /^(orf0+\d+)\s+(\d+)\s+(\d+)\s+([+-])(\d)\s+(-*[\d.]+)/) {
		my ($orfid,$start,$stop,$strand,$frame,$score,$length) = ($1,$2,$3,$4,$5,$6);
		if ($4 eq '+') {
			#$start = $2;
			$stop -= 3;
			$length = $stop - $start + 1;
		} else {
			#$start = $2;
			$stop += 3;
			$length = $start - $stop + 1;
		}
		$orfid =~ s/orf0+//;
		printf("%s\t%d\t%d\t[%s%d L=%d r=%2.6f]\n", $orfid, $start, $stop, $strand, $frame, $length, $score);
	} else {
		warn "can't parse line: $line\n";
	}
#	print $line;
}
close(PREDICT);


# clean up 
unlink $tmp_coord_file;
unlink $tmp_train_file;
if (($preserve_model) || ($use_model)) {
#    print STDERR "Model file name is $model_file\n" if ($verbose);
} else {
    unlink $model_file;
}




